#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OnlineExaminationSystem
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="db1")]
	public partial class DataClasses2DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertexam_master(exam_master instance);
    partial void Updateexam_master(exam_master instance);
    partial void Deleteexam_master(exam_master instance);
    partial void Insertquestion_master(question_master instance);
    partial void Updatequestion_master(question_master instance);
    partial void Deletequestion_master(question_master instance);
    partial void Insertrole_master(role_master instance);
    partial void Updaterole_master(role_master instance);
    partial void Deleterole_master(role_master instance);
    partial void Insertuser_master(user_master instance);
    partial void Updateuser_master(user_master instance);
    partial void Deleteuser_master(user_master instance);
    partial void Insertupdate_exam(update_exam instance);
    partial void Updateupdate_exam(update_exam instance);
    partial void Deleteupdate_exam(update_exam instance);
    partial void Insertgives_exam(gives_exam instance);
    partial void Updategives_exam(gives_exam instance);
    partial void Deletegives_exam(gives_exam instance);
    #endregion
		
		public DataClasses2DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["db1ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses2DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<exam_master> exam_masters
		{
			get
			{
				return this.GetTable<exam_master>();
			}
		}
		
		public System.Data.Linq.Table<question_master> question_masters
		{
			get
			{
				return this.GetTable<question_master>();
			}
		}
		
		public System.Data.Linq.Table<role_master> role_masters
		{
			get
			{
				return this.GetTable<role_master>();
			}
		}
		
		public System.Data.Linq.Table<user_master> user_masters
		{
			get
			{
				return this.GetTable<user_master>();
			}
		}
		
		public System.Data.Linq.Table<update_exam> update_exams
		{
			get
			{
				return this.GetTable<update_exam>();
			}
		}
		
		public System.Data.Linq.Table<gives_exam> gives_exams
		{
			get
			{
				return this.GetTable<gives_exam>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.exam_master")]
	public partial class exam_master : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _exam_id;
		
		private string _exam_type;
		
		private string _exam_name;
		
		private string _exam_info;
		
		private int _timelimit;
		
		private double _marks_onright;
		
		private double _marks_onwrong;
		
		private int _total_que;
		
		private EntitySet<question_master> _question_masters;
		
		private EntitySet<gives_exam> _gives_exams;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onexam_idChanging(int value);
    partial void Onexam_idChanged();
    partial void Onexam_typeChanging(string value);
    partial void Onexam_typeChanged();
    partial void Onexam_nameChanging(string value);
    partial void Onexam_nameChanged();
    partial void Onexam_infoChanging(string value);
    partial void Onexam_infoChanged();
    partial void OntimelimitChanging(int value);
    partial void OntimelimitChanged();
    partial void Onmarks_onrightChanging(double value);
    partial void Onmarks_onrightChanged();
    partial void Onmarks_onwrongChanging(double value);
    partial void Onmarks_onwrongChanged();
    partial void Ontotal_queChanging(int value);
    partial void Ontotal_queChanged();
    #endregion
		
		public exam_master()
		{
			this._question_masters = new EntitySet<question_master>(new Action<question_master>(this.attach_question_masters), new Action<question_master>(this.detach_question_masters));
			this._gives_exams = new EntitySet<gives_exam>(new Action<gives_exam>(this.attach_gives_exams), new Action<gives_exam>(this.detach_gives_exams));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exam_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int exam_id
		{
			get
			{
				return this._exam_id;
			}
			set
			{
				if ((this._exam_id != value))
				{
					this.Onexam_idChanging(value);
					this.SendPropertyChanging();
					this._exam_id = value;
					this.SendPropertyChanged("exam_id");
					this.Onexam_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exam_type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string exam_type
		{
			get
			{
				return this._exam_type;
			}
			set
			{
				if ((this._exam_type != value))
				{
					this.Onexam_typeChanging(value);
					this.SendPropertyChanging();
					this._exam_type = value;
					this.SendPropertyChanged("exam_type");
					this.Onexam_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exam_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string exam_name
		{
			get
			{
				return this._exam_name;
			}
			set
			{
				if ((this._exam_name != value))
				{
					this.Onexam_nameChanging(value);
					this.SendPropertyChanging();
					this._exam_name = value;
					this.SendPropertyChanged("exam_name");
					this.Onexam_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exam_info", DbType="VarChar(MAX)")]
		public string exam_info
		{
			get
			{
				return this._exam_info;
			}
			set
			{
				if ((this._exam_info != value))
				{
					this.Onexam_infoChanging(value);
					this.SendPropertyChanging();
					this._exam_info = value;
					this.SendPropertyChanged("exam_info");
					this.Onexam_infoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timelimit", DbType="Int NOT NULL")]
		public int timelimit
		{
			get
			{
				return this._timelimit;
			}
			set
			{
				if ((this._timelimit != value))
				{
					this.OntimelimitChanging(value);
					this.SendPropertyChanging();
					this._timelimit = value;
					this.SendPropertyChanged("timelimit");
					this.OntimelimitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_marks_onright", DbType="Float NOT NULL")]
		public double marks_onright
		{
			get
			{
				return this._marks_onright;
			}
			set
			{
				if ((this._marks_onright != value))
				{
					this.Onmarks_onrightChanging(value);
					this.SendPropertyChanging();
					this._marks_onright = value;
					this.SendPropertyChanged("marks_onright");
					this.Onmarks_onrightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_marks_onwrong", DbType="Float NOT NULL")]
		public double marks_onwrong
		{
			get
			{
				return this._marks_onwrong;
			}
			set
			{
				if ((this._marks_onwrong != value))
				{
					this.Onmarks_onwrongChanging(value);
					this.SendPropertyChanging();
					this._marks_onwrong = value;
					this.SendPropertyChanged("marks_onwrong");
					this.Onmarks_onwrongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_total_que", DbType="Int NOT NULL")]
		public int total_que
		{
			get
			{
				return this._total_que;
			}
			set
			{
				if ((this._total_que != value))
				{
					this.Ontotal_queChanging(value);
					this.SendPropertyChanging();
					this._total_que = value;
					this.SendPropertyChanged("total_que");
					this.Ontotal_queChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="exam_master_question_master", Storage="_question_masters", ThisKey="exam_id", OtherKey="exam_id")]
		public EntitySet<question_master> question_masters
		{
			get
			{
				return this._question_masters;
			}
			set
			{
				this._question_masters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="exam_master_gives_exam", Storage="_gives_exams", ThisKey="exam_id", OtherKey="exam_id")]
		public EntitySet<gives_exam> gives_exams
		{
			get
			{
				return this._gives_exams;
			}
			set
			{
				this._gives_exams.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_question_masters(question_master entity)
		{
			this.SendPropertyChanging();
			entity.exam_master = this;
		}
		
		private void detach_question_masters(question_master entity)
		{
			this.SendPropertyChanging();
			entity.exam_master = null;
		}
		
		private void attach_gives_exams(gives_exam entity)
		{
			this.SendPropertyChanging();
			entity.exam_master = this;
		}
		
		private void detach_gives_exams(gives_exam entity)
		{
			this.SendPropertyChanging();
			entity.exam_master = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.question_master")]
	public partial class question_master : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _que_id;
		
		private string _que;
		
		private string _op1;
		
		private string _op2;
		
		private string _op3;
		
		private string _op4;
		
		private string _right_answer;
		
		private int _exam_id;
		
		private EntityRef<exam_master> _exam_master;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onque_idChanging(int value);
    partial void Onque_idChanged();
    partial void OnqueChanging(string value);
    partial void OnqueChanged();
    partial void Onop1Changing(string value);
    partial void Onop1Changed();
    partial void Onop2Changing(string value);
    partial void Onop2Changed();
    partial void Onop3Changing(string value);
    partial void Onop3Changed();
    partial void Onop4Changing(string value);
    partial void Onop4Changed();
    partial void Onright_answerChanging(string value);
    partial void Onright_answerChanged();
    partial void Onexam_idChanging(int value);
    partial void Onexam_idChanged();
    #endregion
		
		public question_master()
		{
			this._exam_master = default(EntityRef<exam_master>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_que_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int que_id
		{
			get
			{
				return this._que_id;
			}
			set
			{
				if ((this._que_id != value))
				{
					this.Onque_idChanging(value);
					this.SendPropertyChanging();
					this._que_id = value;
					this.SendPropertyChanged("que_id");
					this.Onque_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_que", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string que
		{
			get
			{
				return this._que;
			}
			set
			{
				if ((this._que != value))
				{
					this.OnqueChanging(value);
					this.SendPropertyChanging();
					this._que = value;
					this.SendPropertyChanged("que");
					this.OnqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_op1", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string op1
		{
			get
			{
				return this._op1;
			}
			set
			{
				if ((this._op1 != value))
				{
					this.Onop1Changing(value);
					this.SendPropertyChanging();
					this._op1 = value;
					this.SendPropertyChanged("op1");
					this.Onop1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_op2", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string op2
		{
			get
			{
				return this._op2;
			}
			set
			{
				if ((this._op2 != value))
				{
					this.Onop2Changing(value);
					this.SendPropertyChanging();
					this._op2 = value;
					this.SendPropertyChanged("op2");
					this.Onop2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_op3", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string op3
		{
			get
			{
				return this._op3;
			}
			set
			{
				if ((this._op3 != value))
				{
					this.Onop3Changing(value);
					this.SendPropertyChanging();
					this._op3 = value;
					this.SendPropertyChanged("op3");
					this.Onop3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_op4", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string op4
		{
			get
			{
				return this._op4;
			}
			set
			{
				if ((this._op4 != value))
				{
					this.Onop4Changing(value);
					this.SendPropertyChanging();
					this._op4 = value;
					this.SendPropertyChanged("op4");
					this.Onop4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_right_answer", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string right_answer
		{
			get
			{
				return this._right_answer;
			}
			set
			{
				if ((this._right_answer != value))
				{
					this.Onright_answerChanging(value);
					this.SendPropertyChanging();
					this._right_answer = value;
					this.SendPropertyChanged("right_answer");
					this.Onright_answerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exam_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int exam_id
		{
			get
			{
				return this._exam_id;
			}
			set
			{
				if ((this._exam_id != value))
				{
					if (this._exam_master.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onexam_idChanging(value);
					this.SendPropertyChanging();
					this._exam_id = value;
					this.SendPropertyChanged("exam_id");
					this.Onexam_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="exam_master_question_master", Storage="_exam_master", ThisKey="exam_id", OtherKey="exam_id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public exam_master exam_master
		{
			get
			{
				return this._exam_master.Entity;
			}
			set
			{
				exam_master previousValue = this._exam_master.Entity;
				if (((previousValue != value) 
							|| (this._exam_master.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._exam_master.Entity = null;
						previousValue.question_masters.Remove(this);
					}
					this._exam_master.Entity = value;
					if ((value != null))
					{
						value.question_masters.Add(this);
						this._exam_id = value.exam_id;
					}
					else
					{
						this._exam_id = default(int);
					}
					this.SendPropertyChanged("exam_master");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.role_master")]
	public partial class role_master : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _role_id;
		
		private string _role_name;
		
		private string _description;
		
		private EntitySet<user_master> _user_masters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onrole_idChanging(int value);
    partial void Onrole_idChanged();
    partial void Onrole_nameChanging(string value);
    partial void Onrole_nameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public role_master()
		{
			this._user_masters = new EntitySet<user_master>(new Action<user_master>(this.attach_user_masters), new Action<user_master>(this.detach_user_masters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int role_id
		{
			get
			{
				return this._role_id;
			}
			set
			{
				if ((this._role_id != value))
				{
					this.Onrole_idChanging(value);
					this.SendPropertyChanging();
					this._role_id = value;
					this.SendPropertyChanged("role_id");
					this.Onrole_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role_name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string role_name
		{
			get
			{
				return this._role_name;
			}
			set
			{
				if ((this._role_name != value))
				{
					this.Onrole_nameChanging(value);
					this.SendPropertyChanging();
					this._role_name = value;
					this.SendPropertyChanged("role_name");
					this.Onrole_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(MAX)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="role_master_user_master", Storage="_user_masters", ThisKey="role_name", OtherKey="role_name")]
		public EntitySet<user_master> user_masters
		{
			get
			{
				return this._user_masters;
			}
			set
			{
				this._user_masters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_user_masters(user_master entity)
		{
			this.SendPropertyChanging();
			entity.role_master = this;
		}
		
		private void detach_user_masters(user_master entity)
		{
			this.SendPropertyChanging();
			entity.role_master = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.user_master")]
	public partial class user_master : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _username;
		
		private string _password;
		
		private string _email;
		
		private string _sequrity_que;
		
		private string _sequrity_ans;
		
		private string _role_name;
		
		private EntitySet<update_exam> _update_exams;
		
		private EntitySet<gives_exam> _gives_exams;
		
		private EntityRef<role_master> _role_master;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void Onsequrity_queChanging(string value);
    partial void Onsequrity_queChanged();
    partial void Onsequrity_ansChanging(string value);
    partial void Onsequrity_ansChanged();
    partial void Onrole_nameChanging(string value);
    partial void Onrole_nameChanged();
    #endregion
		
		public user_master()
		{
			this._update_exams = new EntitySet<update_exam>(new Action<update_exam>(this.attach_update_exams), new Action<update_exam>(this.detach_update_exams));
			this._gives_exams = new EntitySet<gives_exam>(new Action<gives_exam>(this.attach_gives_exams), new Action<gives_exam>(this.detach_gives_exams));
			this._role_master = default(EntityRef<role_master>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sequrity_que", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string sequrity_que
		{
			get
			{
				return this._sequrity_que;
			}
			set
			{
				if ((this._sequrity_que != value))
				{
					this.Onsequrity_queChanging(value);
					this.SendPropertyChanging();
					this._sequrity_que = value;
					this.SendPropertyChanged("sequrity_que");
					this.Onsequrity_queChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sequrity_ans", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string sequrity_ans
		{
			get
			{
				return this._sequrity_ans;
			}
			set
			{
				if ((this._sequrity_ans != value))
				{
					this.Onsequrity_ansChanging(value);
					this.SendPropertyChanging();
					this._sequrity_ans = value;
					this.SendPropertyChanged("sequrity_ans");
					this.Onsequrity_ansChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role_name", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string role_name
		{
			get
			{
				return this._role_name;
			}
			set
			{
				if ((this._role_name != value))
				{
					if (this._role_master.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onrole_nameChanging(value);
					this.SendPropertyChanging();
					this._role_name = value;
					this.SendPropertyChanged("role_name");
					this.Onrole_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_master_update_exam", Storage="_update_exams", ThisKey="username", OtherKey="username")]
		public EntitySet<update_exam> update_exams
		{
			get
			{
				return this._update_exams;
			}
			set
			{
				this._update_exams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_master_gives_exam", Storage="_gives_exams", ThisKey="username", OtherKey="username")]
		public EntitySet<gives_exam> gives_exams
		{
			get
			{
				return this._gives_exams;
			}
			set
			{
				this._gives_exams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="role_master_user_master", Storage="_role_master", ThisKey="role_name", OtherKey="role_name", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public role_master role_master
		{
			get
			{
				return this._role_master.Entity;
			}
			set
			{
				role_master previousValue = this._role_master.Entity;
				if (((previousValue != value) 
							|| (this._role_master.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._role_master.Entity = null;
						previousValue.user_masters.Remove(this);
					}
					this._role_master.Entity = value;
					if ((value != null))
					{
						value.user_masters.Add(this);
						this._role_name = value.role_name;
					}
					else
					{
						this._role_name = default(string);
					}
					this.SendPropertyChanged("role_master");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_update_exams(update_exam entity)
		{
			this.SendPropertyChanging();
			entity.user_master = this;
		}
		
		private void detach_update_exams(update_exam entity)
		{
			this.SendPropertyChanging();
			entity.user_master = null;
		}
		
		private void attach_gives_exams(gives_exam entity)
		{
			this.SendPropertyChanging();
			entity.user_master = this;
		}
		
		private void detach_gives_exams(gives_exam entity)
		{
			this.SendPropertyChanging();
			entity.user_master = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.update_exam")]
	public partial class update_exam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _username;
		
		private string _exam_name;
		
		private string _description;
		
		private System.DateTime _date;
		
		private EntityRef<user_master> _user_master;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void Onexam_nameChanging(string value);
    partial void Onexam_nameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    #endregion
		
		public update_exam()
		{
			this._user_master = default(EntityRef<user_master>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					if (this._user_master.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exam_name", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string exam_name
		{
			get
			{
				return this._exam_name;
			}
			set
			{
				if ((this._exam_name != value))
				{
					this.Onexam_nameChanging(value);
					this.SendPropertyChanging();
					this._exam_name = value;
					this.SendPropertyChanged("exam_name");
					this.Onexam_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_master_update_exam", Storage="_user_master", ThisKey="username", OtherKey="username", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public user_master user_master
		{
			get
			{
				return this._user_master.Entity;
			}
			set
			{
				user_master previousValue = this._user_master.Entity;
				if (((previousValue != value) 
							|| (this._user_master.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user_master.Entity = null;
						previousValue.update_exams.Remove(this);
					}
					this._user_master.Entity = value;
					if ((value != null))
					{
						value.update_exams.Add(this);
						this._username = value.username;
					}
					else
					{
						this._username = default(string);
					}
					this.SendPropertyChanged("user_master");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.gives_exam")]
	public partial class gives_exam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _username;
		
		private int _exam_id;
		
		private string _exam_name;
		
		private System.DateTime _exam_date;
		
		private double _marks_obtained;
		
		private int _right_que;
		
		private int _wrong_que;
		
		private double _total_marks;
		
		private EntityRef<exam_master> _exam_master;
		
		private EntityRef<user_master> _user_master;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void Onexam_idChanging(int value);
    partial void Onexam_idChanged();
    partial void Onexam_nameChanging(string value);
    partial void Onexam_nameChanged();
    partial void Onexam_dateChanging(System.DateTime value);
    partial void Onexam_dateChanged();
    partial void Onmarks_obtainedChanging(double value);
    partial void Onmarks_obtainedChanged();
    partial void Onright_queChanging(int value);
    partial void Onright_queChanged();
    partial void Onwrong_queChanging(int value);
    partial void Onwrong_queChanged();
    partial void Ontotal_marksChanging(double value);
    partial void Ontotal_marksChanged();
    #endregion
		
		public gives_exam()
		{
			this._exam_master = default(EntityRef<exam_master>);
			this._user_master = default(EntityRef<user_master>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					if (this._user_master.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exam_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int exam_id
		{
			get
			{
				return this._exam_id;
			}
			set
			{
				if ((this._exam_id != value))
				{
					if (this._exam_master.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onexam_idChanging(value);
					this.SendPropertyChanging();
					this._exam_id = value;
					this.SendPropertyChanged("exam_id");
					this.Onexam_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exam_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string exam_name
		{
			get
			{
				return this._exam_name;
			}
			set
			{
				if ((this._exam_name != value))
				{
					this.Onexam_nameChanging(value);
					this.SendPropertyChanging();
					this._exam_name = value;
					this.SendPropertyChanged("exam_name");
					this.Onexam_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exam_date", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime exam_date
		{
			get
			{
				return this._exam_date;
			}
			set
			{
				if ((this._exam_date != value))
				{
					this.Onexam_dateChanging(value);
					this.SendPropertyChanging();
					this._exam_date = value;
					this.SendPropertyChanged("exam_date");
					this.Onexam_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_marks_obtained", DbType="Float NOT NULL")]
		public double marks_obtained
		{
			get
			{
				return this._marks_obtained;
			}
			set
			{
				if ((this._marks_obtained != value))
				{
					this.Onmarks_obtainedChanging(value);
					this.SendPropertyChanging();
					this._marks_obtained = value;
					this.SendPropertyChanged("marks_obtained");
					this.Onmarks_obtainedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_right_que", DbType="Int NOT NULL")]
		public int right_que
		{
			get
			{
				return this._right_que;
			}
			set
			{
				if ((this._right_que != value))
				{
					this.Onright_queChanging(value);
					this.SendPropertyChanging();
					this._right_que = value;
					this.SendPropertyChanged("right_que");
					this.Onright_queChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_wrong_que", DbType="Int NOT NULL")]
		public int wrong_que
		{
			get
			{
				return this._wrong_que;
			}
			set
			{
				if ((this._wrong_que != value))
				{
					this.Onwrong_queChanging(value);
					this.SendPropertyChanging();
					this._wrong_que = value;
					this.SendPropertyChanged("wrong_que");
					this.Onwrong_queChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_total_marks", DbType="Float NOT NULL")]
		public double total_marks
		{
			get
			{
				return this._total_marks;
			}
			set
			{
				if ((this._total_marks != value))
				{
					this.Ontotal_marksChanging(value);
					this.SendPropertyChanging();
					this._total_marks = value;
					this.SendPropertyChanged("total_marks");
					this.Ontotal_marksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="exam_master_gives_exam", Storage="_exam_master", ThisKey="exam_id", OtherKey="exam_id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public exam_master exam_master
		{
			get
			{
				return this._exam_master.Entity;
			}
			set
			{
				exam_master previousValue = this._exam_master.Entity;
				if (((previousValue != value) 
							|| (this._exam_master.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._exam_master.Entity = null;
						previousValue.gives_exams.Remove(this);
					}
					this._exam_master.Entity = value;
					if ((value != null))
					{
						value.gives_exams.Add(this);
						this._exam_id = value.exam_id;
					}
					else
					{
						this._exam_id = default(int);
					}
					this.SendPropertyChanged("exam_master");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_master_gives_exam", Storage="_user_master", ThisKey="username", OtherKey="username", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public user_master user_master
		{
			get
			{
				return this._user_master.Entity;
			}
			set
			{
				user_master previousValue = this._user_master.Entity;
				if (((previousValue != value) 
							|| (this._user_master.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user_master.Entity = null;
						previousValue.gives_exams.Remove(this);
					}
					this._user_master.Entity = value;
					if ((value != null))
					{
						value.gives_exams.Add(this);
						this._username = value.username;
					}
					else
					{
						this._username = default(string);
					}
					this.SendPropertyChanged("user_master");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
